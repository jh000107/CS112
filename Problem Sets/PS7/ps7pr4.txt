1.

best case:
You are finding the depth of a root key -> O(1)

worst case:
1) balanced
- The key that you are finding is located at the very bottom of the height of the tree -> O(n).

2) not balanced
- the key that you are finding is at the very bottom of the height of the tree -> O(n).

2.

private static int depthInTree(int key, Node root) {
    if (key == root.key) {
        return 0;
    }

    if (key < root.key && root.left != null) {
        int depthInLeft = depthInTree(key, root.left);
        if (depthInLeft != -1) {
            return depthInLeft + 1;
        }
    }

    if (key > root.key && root.right != null) {
        int depthInRight = depthInTree(key, root.right);
        if (depthInRight != -1) {
            return depthInRight + 1;
        }
    }

    return -1;
}

3.
best case:
when the key that you are finding is the root key -> O(1)

worst case:
The key that you are finding is located at the bottom of the tree.

1) balanced
- If a tree is a binary search tree, you cut the problem size roughly in half since we can check rather if the desired key is smaller or greater than the root key -> O(logn) base 2

2) not balanced
- O(n) since it has to traverse through the tree with the amount of its height.


